package views;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;

/*
 * Auto generated code to render template views/HelloWorld.rocker.html
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class HelloWorld extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.HTML; }
    static public String getTemplateName() { return "HelloWorld.rocker.html"; }
    static public String getTemplatePackageName() { return "views"; }
    static public String getHeaderHash() { return "-1538471425"; }
    static public long getModifiedAt() { return 1584943135696L; }
    static public String[] getArgumentNames() { return new String[] { "message", "vfgfg" }; }

    // argument @ [4:2]
    private String message;
    // argument @ [4:2]
    private String vfgfg;

    public HelloWorld message(String message) {
        this.message = message;
        return this;
    }

    public String message() {
        return this.message;
    }

    public HelloWorld vfgfg(String vfgfg) {
        this.vfgfg = vfgfg;
        return this;
    }

    public String vfgfg() {
        return this.vfgfg;
    }

    static public HelloWorld template(String message, String vfgfg) {
        return new HelloWorld()
            .message(message)
            .vfgfg(vfgfg);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // Hello 
        static private final byte[] PLAIN_TEXT_0_0;
        // !\n\ndsdfsfsdgfdsgsdfgsfdgsfdgs\n\nfsgfgsfgsdfgsfdgsfdg\nsdfgsdfgsfdg\n
        static private final byte[] PLAIN_TEXT_1_0;
        // i am in if block!\n
        static private final byte[] PLAIN_TEXT_2_0;
        // i am in else block!\n
        static private final byte[] PLAIN_TEXT_3_0;
        // \n\nsdfgsdfgsfdgsdfg\n\n\nsdfgsdfgsdfgsfdg\n\ns\ndfgsdfgsdfgsfd\ngs\ndfg\nsdf\ngs\ndfgsdfgsdfg\n 
        static private final byte[] PLAIN_TEXT_4_0;
        //  dfsd\nsdfsdfs
        static private final byte[] PLAIN_TEXT_5_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(HelloWorld.class.getClassLoader(), HelloWorld.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
        }

        // argument @ [4:2]
        protected final String message;
        // argument @ [4:2]
        protected final String vfgfg;

        public Template(HelloWorld model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.message = model.message();
            this.vfgfg = model.vfgfg();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [4:37]
            __internal.aboutToExecutePosInTemplate(4, 37);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [6:7]
            __internal.aboutToExecutePosInTemplate(6, 7);
            __internal.renderValue(message, false);
            // PlainText @ [6:15]
            __internal.aboutToExecutePosInTemplate(6, 15);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // IfBlockBegin @ [12:1]
            __internal.aboutToExecutePosInTemplate(12, 1);
            if (message.equals("dfsdf")) {
                // PlainText @ [12:32]
                __internal.aboutToExecutePosInTemplate(12, 32);
                __internal.writeValue(PLAIN_TEXT_2_0);
                // IfBlockElse @ [14:1]
                __internal.aboutToExecutePosInTemplate(14, 1);
            } else { // else @ [14:1]
                // PlainText @ [14:9]
                __internal.aboutToExecutePosInTemplate(14, 9);
                __internal.writeValue(PLAIN_TEXT_3_0);
                // IfBlockEnd @ [12:1]
                __internal.aboutToExecutePosInTemplate(12, 1);
            } // if end @ [12:1]
            // PlainText @ [16:2]
            __internal.aboutToExecutePosInTemplate(16, 2);
            __internal.writeValue(PLAIN_TEXT_4_0);
            // ValueExpression @ [31:2]
            __internal.aboutToExecutePosInTemplate(31, 2);
            __internal.renderValue(vfgfg, false);
            // PlainText @ [31:8]
            __internal.aboutToExecutePosInTemplate(31, 8);
            __internal.writeValue(PLAIN_TEXT_5_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "Hello ";
        static private final String PLAIN_TEXT_1_0 = "!\n\ndsdfsfsdgfdsgsdfgsfdgsfdgs\n\nfsgfgsfgsdfgsfdgsfdg\nsdfgsdfgsfdg\n";
        static private final String PLAIN_TEXT_2_0 = "i am in if block!\n";
        static private final String PLAIN_TEXT_3_0 = "i am in else block!\n";
        static private final String PLAIN_TEXT_4_0 = "\n\nsdfgsdfgsfdgsdfg\n\n\nsdfgsdfgsdfgsfdg\n\ns\ndfgsdfgsdfgsfd\ngs\ndfg\nsdf\ngs\ndfgsdfgsdfg\n ";
        static private final String PLAIN_TEXT_5_0 = " dfsd\nsdfsdfs";

    }

}
